from fastapi import APIRouter, HTTPException, Depends, UploadFile, File, Query, Request
from fastapi.security import OAuth2PasswordBearer
from fastapi.encoders import jsonable_encoder
import httpx
import logging
import uuid
from typing import List, Optional
from pydantic import BaseModel, Field, field_validator
from sourcing_service.routes.startups import FillTemplateRequest
from api_gateway.schemas.sourcing import (
    StartupFilterRequest, StartupCreateRequest, InvestorProfileUpdate,
    FounderProfileUpdate, Answer, FillTemplateRequest,)


router = APIRouter()

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

SOURCING_SERVICE_URL = "http://127.0.0.1:8002"
DUE_DILIGENCE_SERVICE_URL = "http://127.0.0.1:8005/kpi/analyze"
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/auth/login")

"""
# ‚úÖ 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤
@router.get("/", summary="–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤", tags=["Startups"])
"""

# ‚úÖ 1. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞
@router.post("/investors/profile", summary="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞", tags=["Startups"])
async def save_investor_profile(
    investor_data: InvestorProfileUpdate,  # ‚úÖ Pydantic-–º–æ–¥–µ–ª—å –≤–º–µ—Å—Ç–æ dict
    token: str = Depends(oauth2_scheme)
):
    headers = {"Authorization": f"Bearer {token}"}
    
    async with httpx.AsyncClient() as client:
        response = await client.post(
            f"{SOURCING_SERVICE_URL}/startups/investors/profile",
            json=investor_data.model_dump(),  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è Pydantic v2
            headers=headers
        )
        
        if response.status_code != 200:
            try:
                error_detail = response.json().get("detail", "Unknown error")
            except Exception:
                error_detail = "Invalid response from sourcing service"

            raise HTTPException(status_code=response.status_code, detail=error_detail)
        
        return response.json()


# ‚úÖ 2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è
@router.post("/founders/profile", summary="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è", tags=["Startups"])
async def save_founder_profile(
    founder_data: FounderProfileUpdate,
    token: str = Depends(oauth2_scheme)
):
    headers = {"Authorization": f"Bearer {token}"}

    async with httpx.AsyncClient() as client:
        response = await client.post(
            f"{SOURCING_SERVICE_URL}/startups/founders/profile",
            json=founder_data.model_dump(),  # ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON
            headers=headers
        )

        if response.status_code != 200:
            raise HTTPException(status_code=response.status_code, detail=response.json().get("detail"))

        return response.json()

# ‚úÖ 3. –ó–∞–≥—Ä—É–∑–∫–∞ Pitch Deck –∏ –∞–Ω–∞–ª–∏–∑
@router.post("/founders/upload", summary="–ó–∞–≥—Ä—É–∑–∏—Ç—å Pitch Deck –∏ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑", tags=["Startups"])
async def upload_pitch_deck(file: UploadFile = File(...), token: str = Depends(oauth2_scheme)):
    headers = {"Authorization": f"Bearer {token}"}
    
    TIMEOUT = 240.0  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 4 –º–∏–Ω—É—Ç

    async with httpx.AsyncClient(timeout=TIMEOUT) as client:
        files = {"file": (file.filename, await file.read(), file.content_type)}
        response = await client.post(f"{SOURCING_SERVICE_URL}/startups/founders/upload", files=files, headers=headers)
        
        if response.status_code != 200:
            raise HTTPException(status_code=response.status_code, detail=response.json().get("detail"))
        
        return response.json()
    
# ‚úÖ 3.1. –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Ñ–∞—É–Ω–¥–µ—Ä–∞ 
@router.get("/founders/profile", summary="–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Ñ–∞—É–Ω–¥–µ—Ä–∞", tags=["Startups"])
async def proxy_get_founder_profile(token: str = Depends(oauth2_scheme)):
    try:
        headers = {"Authorization": f"Bearer {token}"}
        async with httpx.AsyncClient() as client:
            response = await client.get(
                f"{SOURCING_SERVICE_URL}/startups/founders/profile",
                headers=headers
            )

        if response.status_code != 200:
            try:
                error_detail = response.json().get("detail", "–û—à–∏–±–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞")
            except Exception:
                error_detail = response.text or "–û—à–∏–±–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"

            raise HTTPException(
                status_code=response.status_code,
                detail=error_detail
            )

        return response.json()

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —Ñ–∞—É–Ω–¥–µ—Ä–∞")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è —Ñ–∞—É–Ω–¥–µ—Ä–∞")


# ‚úÖ 4. –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–∞–ø–∞ "–ó–∞–ø–æ–ª–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω"
@router.post("/startups/fill_template", summary="–ó–∞–ø–æ–ª–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω", tags=["Startups"])
async def fill_template(data: FillTemplateRequest, token: str = Depends(oauth2_scheme)):
    headers = {"Authorization": f"Bearer {token}"}

    try:
        # üîπ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º `UUID` –≤ —Å—Ç—Ä–æ–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        request_data = jsonable_encoder(data)

        async with httpx.AsyncClient() as client:
            response = await client.post(f"{SOURCING_SERVICE_URL}/startups/startups/fill_template", json=request_data, headers=headers)

        if response.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è: {response.status_code} - {response.text}")
            raise HTTPException(status_code=response.status_code, detail=response.json().get("detail"))

        return response.json()

    except httpx.RequestError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å sourcing_service: {e}")
        raise HTTPException(status_code=502, detail="–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–∏—Å–æ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤")

    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")


# ‚úÖ 5.**–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞—Ä—Ç–∞–ø–∞**
@router.get("/startups/{startup_id}/score", summary="–ü–æ–ª—É—á–∏—Ç—å —Å–∫–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ä—Ç–∞–ø–∞ –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ —à–∞–±–ª–æ–Ω–∞", tags=["Startups"])
async def get_startup_score(startup_id: uuid.UUID, token: str = Depends(oauth2_scheme)):
    headers = {"Authorization": f"Bearer {token}"}

    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(f"{SOURCING_SERVICE_URL}/startups/startups/{startup_id}/score", headers=headers)

        if response.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è: {response.status_code} - {response.text}")
            raise HTTPException(status_code=response.status_code, detail=response.json().get("detail"))

        return response.json()

    except httpx.RequestError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å sourcing_service: {e}")
        raise HTTPException(status_code=502, detail="–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–∏—Å–æ–º —Å–∫–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤")

    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

    
# ‚úÖ 5. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤ —á–µ—Ä–µ–∑ API Gateway
@router.post("/filter", summary="–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤", tags=["Startups"])
async def filter_startups(
    filters: StartupFilterRequest,
    token: str = Depends(oauth2_scheme)  # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
):
    headers = {"Authorization": f"Bearer {token}"}  # ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–∫–µ–Ω

    async with httpx.AsyncClient() as client:
        try:
            response = await client.post(
                f"{SOURCING_SERVICE_URL}/startups/filter",
                json=filters.model_dump(),  # ‚úÖ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –≤–º–µ—Å—Ç–æ `.dict()`
                headers=headers  # ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
            )
            response.raise_for_status()  # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ HTTP

            return response.json()  # ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π JSON-–æ—Ç–≤–µ—Ç
        except httpx.HTTPStatusError as e:
            raise HTTPException(status_code=e.response.status_code, detail=f"–û—à–∏–±–∫–∞: {e.response.text}")
        except httpx.RequestError:
            raise HTTPException(status_code=502, detail="–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å sourcing_service")
        except ValueError:  # ‚úÖ JSONDecodeError
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON-–æ—Ç–≤–µ—Ç–∞")

# ‚úÖ 7. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞—Ä—Ç–∞–ø–µ
@router.get("/{startup_id}", summary="–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞—Ä—Ç–∞–ø–µ", tags=["Startups"])
async def get_startup_detail(startup_id: str):
    TIMEOUT = 30.0  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 2 –º–∏–Ω—É—Ç
    async with httpx.AsyncClient(timeout=TIMEOUT) as client:
        response = await client.get(f"{SOURCING_SERVICE_URL}/startups/{startup_id}")
        
        if response.status_code != 200:
            raise HTTPException(status_code=response.status_code, detail=response.json().get("detail"))
        
        return response.json()

# ‚úÖ 8. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ä—Ç–∞–ø–∞ –≤ Due Diligence
@router.post("/select/{startup_id}", summary="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–∞–ø –≤ Due Diligence", tags=["Startups"])
async def submit_due_diligence(startup_id: str, token: str = Depends(oauth2_scheme)):
    headers = {"Authorization": f"Bearer {token}"}

    async with httpx.AsyncClient() as client:
        response = await client.post(f"{SOURCING_SERVICE_URL}/select/{startup_id}", headers=headers)
        
        if response.status_code != 200:
            raise HTTPException(status_code=response.status_code, detail=response.json().get("detail"))
        
        return response.json()
    
# ‚úÖ 9. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞
@router.get("/matches/me", summary="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–Ω–≤–µ—Å—Ç–æ—Ä—É", tags=["Startups"])
async def get_matching_startups(token: str = Depends(oauth2_scheme)):
    headers = {"Authorization": f"Bearer {token}"}

    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(f"{SOURCING_SERVICE_URL}/startups/matches/me", headers=headers)
            response.raise_for_status()

            return response.json()
        except httpx.HTTPStatusError as e:
            raise HTTPException(status_code=e.response.status_code, detail=f"–û—à–∏–±–∫–∞: {e.response.text}")
        except httpx.RequestError:
            raise HTTPException(status_code=502, detail="–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å sourcing_service")
        except ValueError:
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON-–æ—Ç–≤–µ—Ç–∞")

"""
@router.get("/matches/{investor_id}", summary="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–Ω–≤–µ—Å—Ç–æ—Ä—É", tags=["Startups"])
async def get_matching_startups(investor_id: str, token: str = Depends(oauth2_scheme)):  
    headers = {"Authorization": f"Bearer {token}"}  # ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–∫–µ–Ω

    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(f"{SOURCING_SERVICE_URL}/startups/matches/{investor_id}", headers=headers)
            response.raise_for_status()  # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ HTTP

            return response.json()  # ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π JSON-–æ—Ç–≤–µ—Ç
        except httpx.HTTPStatusError as e:
            raise HTTPException(status_code=e.response.status_code, detail=f"–û—à–∏–±–∫–∞: {e.response.text}")
        except httpx.RequestError:
            raise HTTPException(status_code=502, detail="–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å sourcing_service")
        except ValueError:  # ‚úÖ JSONDecodeError
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON-–æ—Ç–≤–µ—Ç–∞")"""

# ‚úÖ 10. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞–ø–∞
@router.get("/investors/matches/{founder_id}", summary="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å—Ç–∞—Ä—Ç–∞–ø—É", tags=["Startups"])
async def get_matching_investors(founder_id: str, token: str = Depends(oauth2_scheme)):  
    headers = {"Authorization": f"Bearer {token}"}  # ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–∫–µ–Ω

    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(f"{SOURCING_SERVICE_URL}/startups/investors/matches/{founder_id}", headers=headers)
            response.raise_for_status()  # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ HTTP

            return response.json()  # ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π JSON-–æ—Ç–≤–µ—Ç
        except httpx.HTTPStatusError as e:
            raise HTTPException(status_code=e.response.status_code, detail=f"–û—à–∏–±–∫–∞: {e.response.text}")
        except httpx.RequestError:
            raise HTTPException(status_code=502, detail="–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å sourcing_service")
        except ValueError:  # ‚úÖ JSONDecodeError
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON-–æ—Ç–≤–µ—Ç–∞")


# ‚úÖ 11. –°–∫–æ—Ä–∏–Ω–≥ –ø–æ pitch deck (analysis_results)
@router.get("/batch/pitch-scores", summary="–°–∫–æ—Ä–∏–Ω–≥ –ø–æ pitch deck (analysis_results)", tags=["Startups"])
async def proxy_batch_pitch_scores(request: Request, ids: str = Query(...)):
    """
    –ü—Ä–æ–∫—Å–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤ –∏–∑ —Å–µ—Ä–≤–∏—Å–∞ sourcing_service.
    –ü–µ—Ä–µ–¥–∞–µ—Ç Authorization-–∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞.
    """
    try:
        ids_list = ids.split(",")
        url = f"{SOURCING_SERVICE_URL}/startups/batch/pitch-scores"

        headers = {}
        # –ü—Ä–æ–∫—Å–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if "authorization" in request.headers:
            headers["Authorization"] = request.headers["authorization"]

        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.get(
                url,
                params={"ids": ",".join(ids_list)},
                headers=headers,
            )

        if response.status_code == 200:
            return response.json()

        # –ï—Å–ª–∏ sourcing_service –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É ‚Äî –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –µ—ë –∫–ª–∏–µ–Ω—Ç—É
        try:
            error_detail = response.json().get("detail", "–û—à–∏–±–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞")
        except Exception:
            error_detail = response.text or "–û—à–∏–±–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"

        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ sourcing_service: {response.status_code} - {error_detail}")
        raise HTTPException(
            status_code=response.status_code,
            detail=error_detail
        )

    except HTTPException as e:
        # –ï—Å–ª–∏ —É–∂–µ –∫–∏–Ω—É–ª–∏ HTTPException, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        raise e

    except httpx.RequestError as e:
        logger.exception("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å sourcing_service")
        raise HTTPException(status_code=502, detail="–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –≤–Ω–µ—à–Ω–∏–º —Å–µ—Ä–≤–∏—Å–æ–º")
    
    except Exception:
        logger.exception("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ batch pitch-scores")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫–æ—Ä–∏–Ω–≥–æ–≤")
