from fastapi import APIRouter, HTTPException
import httpx
from pydantic import BaseModel
from typing import List, Dict

router = APIRouter()

DUE_DILIGENCE_SERVICE_URL = "http://127.0.0.1:8005/kpi"

# ‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞
class KPIRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ KPI —Å—Ç–∞—Ä—Ç–∞–ø–∞"""
    startup_id: int
    stage: str  # –°—Ç–∞–¥–∏—è —Å—Ç–∞—Ä—Ç–∞–ø–∞
    type_deal: str  # –¢–∏–ø —Å–¥–µ–ª–∫–∏
    selected_kpis: List[str]  # –í—ã–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏

# ‚úÖ –ú–æ–¥–µ–ª—å –æ—Ç–≤–µ—Ç–∞
class KPIResponse(BaseModel):
    """–û—Ç–≤–µ—Ç API —Å KPI –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏"""
    startup_id: int
    kpi_results: Dict[str, Dict]  # {"–°–µ–∫—Ç–æ—Ä KPI": {"–ù–∞–∑–≤–∞–Ω–∏–µ KPI": {"–∑–Ω–∞—á–µ–Ω–∏–µ": "10%", "—Å—Ç–∞—Ç—É—Å": "–ü–æ–ª—É—á–µ–Ω/–ù–µ—Ç"}}}
    recommended_docs: List[str]  # –î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ —Å–¥–µ–ª–∫–µ

async def forward_request(endpoint: str, request: KPIRequest):
    """
    üîÅ –ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ due_diligence_service
    """
    async with httpx.AsyncClient() as client:
        try:
            response = await client.post(f"{DUE_DILIGENCE_SERVICE_URL}{endpoint}", json=request.dict(), timeout=5.0)
            response.raise_for_status()
        except httpx.ConnectError:
            raise HTTPException(status_code=503, detail="Due Diligence Service is unavailable. Please try again later.")
        except httpx.ReadTimeout:
            raise HTTPException(status_code=504, detail="Due Diligence Service timeout. Please try again later.")
        except httpx.HTTPStatusError as e:
            raise HTTPException(status_code=e.response.status_code, detail=f"Error from due_diligence_service: {e.response.text}")
        except httpx.RequestError as e:
            raise HTTPException(status_code=500, detail=f"Unexpected error: {str(e)}")

    return response.json()

@router.post(
    "/analyze",
    summary="–ê–Ω–∞–ª–∏–∑ KPI —Å—Ç–∞—Ä—Ç–∞–ø–∞",
    description="–ü—Ä–æ–∫—Å–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ KPI —Å—Ç–∞—Ä—Ç–∞–ø–∞ –≤ due_diligence_service",
    response_model=KPIResponse,
    responses={
        200: {
            "description": "–£—Å–ø–µ—à–Ω—ã–π –∞–Ω–∞–ª–∏–∑ KPI",
            "content": {
                "application/json": {
                    "example": {
                        "startup_id": 101,
                        "kpi_results": {
                            "Financial Performance": {
                                "Revenue Growth": {"value": "10%", "status": "–ü–æ–ª—É—á–µ–Ω"},
                                "Burn Rate": {"value": "Low", "status": "–ù–µ—Ç"}
                            }
                        },
                        "recommended_docs": ["Term Sheet", "Investment Agreement"]
                    }
                }
            }
        },
        400: {
            "description": "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–Ω–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)",
            "content": {"application/json": {"example": {"detail": "Invalid startup_id"}}}
        },
        503: {
            "description": "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
            "content": {"application/json": {"example": {"detail": "Due Diligence Service is unavailable"}}}
        }
    }
)
async def analyze_kpi(request: KPIRequest):
    """
    üîÅ –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ KPI –≤ due_diligence_service.
    """
    return await forward_request("/analyze", request)

# ‚úÖ –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Ç–∞—Ä—Ç–∞–ø–∞ –≤ Due Diligence
@router.post("/receive/{startup_id}", summary="–ü—Ä–∏—ë–º —Å—Ç–∞—Ä—Ç–∞–ø–∞ –≤ Due Diligence")
async def receive_startup_for_due_diligence(startup_id: str, request: dict):
    """
    üîÅ –ü—Ä–æ–∫—Å–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞—Ä—Ç–∞–ø–µ –≤ due_diligence_service.
    """
    async with httpx.AsyncClient() as client:
        response = await client.post(f"{DUE_DILIGENCE_SERVICE_URL}/analyze/{startup_id}", json=request)
        return response.json()
