"""Add startup_id to analysis_results

Revision ID: 0e8aa16b9232
Revises: bdd2923975a6
Create Date: 2025-03-11 19:35:35.459500

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '0e8aa16b9232'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    #op.drop_table('refresh_tokens')
    #op.drop_table('investor_profiles')
    #op.drop_table('kpi_metrics')
    #op.drop_table('deals')
    op.add_column('analysis_results', sa.Column('startup_id', sa.UUID(), nullable=False))
    op.create_foreign_key(None, 'analysis_results', 'startups', ['startup_id'], ['id'], ondelete='CASCADE')
    op.alter_column('startups', 'founder_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('startups', 'industry',
               existing_type=postgresql.ARRAY(sa.VARCHAR()),
               nullable=False)
    op.alter_column('startups', 'stage',
                   existing_type=sa.TEXT(),
                   type_=sa.ARRAY(sa.String()),
                   postgresql_using="string_to_array(stage, ',')::TEXT[]::VARCHAR[]",
                   nullable=False)
    op.alter_column('startups', 'region',
               existing_type=sa.TEXT(),
               type_=sa.ARRAY(sa.String()),
               nullable=False)
    op.alter_column('startups', 'min_check',
               existing_type=sa.NUMERIC(),
               type_=sa.Float(),
               nullable=False)
    op.alter_column('startups', 'pitch_deck',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    #op.drop_column('startups', 'contacts')
    #op.drop_column('startups', 'company_name')
    op.alter_column('users', 'email',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('users', 'company_name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               nullable=False)
    op.alter_column('users', 'contacts',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               nullable=False)
    op.alter_column('users', 'password_hash',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('users', 'full_name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               nullable=False)
    op.alter_column('users', 'role',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               nullable=False)
    op.alter_column('users', 'investor_type',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=sa.ARRAY(sa.String()),
               existing_nullable=True)
    op.alter_column('users', 'investment_stage',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=sa.ARRAY(sa.String()),
               existing_nullable=True)
    op.alter_column('users', 'industry',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=sa.ARRAY(sa.String()),
               existing_nullable=True)
    op.alter_column('users', 'region',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=sa.ARRAY(sa.String()),
               existing_nullable=True)
    #op.drop_column('users', 'min_investment')
    #op.drop_column('users', 'startup_stage')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    #op.add_column('users', sa.Column('startup_stage', sa.TEXT(), autoincrement=False, nullable=True))
    #op.add_column('users', sa.Column('min_investment', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.alter_column('users', 'region',
               existing_type=sa.ARRAY(sa.String()),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True)
    op.alter_column('users', 'industry',
               existing_type=sa.ARRAY(sa.String()),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True)
    op.alter_column('users', 'investment_stage',
               existing_type=sa.ARRAY(sa.String()),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True)
    op.alter_column('users', 'investor_type',
               existing_type=sa.ARRAY(sa.String()),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True)
    op.alter_column('users', 'role',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               nullable=True)
    op.alter_column('users', 'full_name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               nullable=True)
    op.alter_column('users', 'password_hash',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('users', 'contacts',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               nullable=True)
    op.alter_column('users', 'company_name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               nullable=True)
    op.alter_column('users', 'email',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    #op.add_column('startups', sa.Column('company_name', sa.TEXT(), autoincrement=False, nullable=True))
    #op.add_column('startups', sa.Column('contacts', sa.TEXT(), autoincrement=False, nullable=True))
    op.alter_column('startups', 'pitch_deck',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('startups', 'min_check',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(),
               nullable=True)
    op.alter_column('startups', 'region',
               existing_type=sa.ARRAY(sa.String()),
               type_=sa.TEXT(),
               nullable=True)
    op.alter_column('startups', 'stage',
                   existing_type=sa.ARRAY(sa.String()),
                   type_=sa.TEXT(),
                   postgresql_using="array_to_string(stage, ',')",
                   nullable=True)
    op.alter_column('startups', 'industry',
               existing_type=postgresql.ARRAY(sa.VARCHAR()),
               nullable=True)
    op.alter_column('startups', 'founder_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.drop_constraint(None, 'analysis_results', type_='foreignkey')
    #op.drop_column('analysis_results', 'startup_id')
    op.create_table('deals',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('investor_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('startup_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('status', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('investment_amount', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.CheckConstraint("status = ANY (ARRAY['Due Diligence'::text, 'Deal Room'::text, 'Closed'::text, 'Exited'::text])", name='deals_status_check'),
    sa.ForeignKeyConstraint(['investor_id'], ['users.id'], name='deals_investor_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['startup_id'], ['startups.id'], name='deals_startup_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='deals_pkey')
    )
    op.create_table('kpi_metrics',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('startup_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('value', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('status', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.CheckConstraint("status = ANY (ARRAY['Получен'::text, 'Нет'::text])", name='kpi_metrics_status_check'),
    sa.ForeignKeyConstraint(['startup_id'], ['startups.id'], name='kpi_metrics_startup_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='kpi_metrics_pkey')
    )
    op.create_table('investor_profiles',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('investor_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('thesis', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('investment_stage', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('industry', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('region', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('min_check', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('contacts', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.CheckConstraint("investor_type = ANY (ARRAY['VC'::text, 'PE'::text, 'CVC'::text, 'Angel'::text])", name='investor_profiles_investor_type_check'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='investor_profiles_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='investor_profiles_pkey')
    )
    op.create_table('refresh_tokens',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('token', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='refresh_tokens_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='refresh_tokens_pkey'),
    sa.UniqueConstraint('token', name='refresh_tokens_token_key')
    )
    # ### end Alembic commands ###
