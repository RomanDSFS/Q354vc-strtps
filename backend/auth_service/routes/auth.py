from fastapi import APIRouter, HTTPException, Depends
from pydantic import BaseModel
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from auth_service.models import User, RefreshToken
from auth_service.database import get_db
from passlib.context import CryptContext
import jwt
import datetime
import os
import uuid
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from sqlalchemy import delete
from shared.schemas import CurrentUser

router = APIRouter()

# üîπ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
SECRET_KEY = os.getenv("SECRET_KEY", "your_secret_key")
REFRESH_SECRET_KEY = os.getenv("REFRESH_SECRET_KEY", "your_refresh_secret_key")
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 180
REFRESH_TOKEN_EXPIRE_DAYS = 30

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
#oauth2_scheme = OAuth2PasswordBearer(tokenUrl="http://127.0.0.1:8001/auth/login")

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/auth/login")

# ‚úÖ 1. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–ª—è –ë–î
async def get_db_session():
    async for session in get_db():
        yield session

# ‚úÖ 2. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è

# üîπ –ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
class RegisterRequest(BaseModel):
    email: str
    company_name : str  
    contacts: str
    password: str  
    full_name: str
    role: str  # investor, founder, admin

# üîπ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.post("/register", summary="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def register(request: RegisterRequest, db: AsyncSession = Depends(get_db_session)):
    result = await db.execute(select(User).where(User.email == request.email))
    existing_user = result.scalars().first()

    if existing_user:
        raise HTTPException(status_code=400, detail="Email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")

    if request.role not in ["investor", "founder", "admin"]:
        raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–æ–ª—å")

    hashed_password = pwd_context.hash(request.password)

    new_user = User(
        id=uuid.uuid4(),
        email=request.email,
        company_name=request.company_name, 
        contacts=request.contacts,
        password_hash=hashed_password,
        full_name=request.full_name,
        role=request.role
    )
    db.add(new_user)
    await db.commit()
    await db.refresh(new_user)

    return {"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"}

# üîπ –ú–æ–¥–µ–ª—å –æ—Ç–≤–µ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–∞–º–∏
class TokenResponse(BaseModel):
    access_token: str
    refresh_token: str
    token_type: str

# üîπ –õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.post("/login", response_model=TokenResponse, summary="–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def login(form_data: OAuth2PasswordRequestForm = Depends(), db: AsyncSession = Depends(get_db_session)):
    result = await db.execute(select(User).where(User.email == form_data.username))
    user = result.scalars().first()

    if not user or not pwd_context.verify(form_data.password, user.password_hash):
        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

    access_token = create_access_token({"sub": str(user.id), "role": user.role})
    refresh_token = create_refresh_token({"sub": str(user.id)})

    new_refresh = RefreshToken(id=uuid.uuid4(), user_id=user.id, token=refresh_token)
    db.add(new_refresh)
    await db.commit()

    return {"access_token": access_token, "refresh_token": refresh_token, "token_type": "Bearer"}

# ‚úÖ 3. –†–∞–±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–∞–º–∏

# üîπ –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Access Token
def create_access_token(data: dict):
    expire = datetime.datetime.now(datetime.UTC) + datetime.timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    #expire = datetime.datetime.utcnow() + datetime.timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    data.update({"exp": expire})
    return jwt.encode(data, SECRET_KEY, algorithm=ALGORITHM)

# üîπ –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Refresh Token
def create_refresh_token(data: dict):
    expire = datetime.datetime.now(datetime.UTC) + datetime.timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    #expire = datetime.datetime.utcnow() + datetime.timedelta(days=REFRESH_TOKEN_EXPIRE_DAYS)
    data.update({"exp": expire})
    return jwt.encode(data, REFRESH_SECRET_KEY, algorithm=ALGORITHM)

# üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Access-—Ç–æ–∫–µ–Ω–∞
class RefreshRequest(BaseModel):
    refresh_token: str

@router.post("/refresh", response_model=TokenResponse, summary="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ access-—Ç–æ–∫–µ–Ω–∞")
async def refresh_token(request: RefreshRequest, db: AsyncSession = Depends(get_db_session)):
    result = await db.execute(select(RefreshToken).where(RefreshToken.token == request.refresh_token))
    refresh_entry = result.scalars().first()

    if not refresh_entry:
        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–π refresh-—Ç–æ–∫–µ–Ω")

    try:
        payload = jwt.decode(request.refresh_token, REFRESH_SECRET_KEY, algorithms=[ALGORITHM])
        user_id = payload.get("sub")

        result = await db.execute(select(User).where(User.id == user_id))
        user = result.scalars().first()

        if not user:
            raise HTTPException(status_code=401, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except jwt.ExpiredSignatureError:
        raise HTTPException(status_code=401, detail="Refresh-—Ç–æ–∫–µ–Ω –∏—Å—Ç—ë–∫")

    new_access_token = create_access_token({"sub": str(user.id), "role": user.role})

    return {"access_token": new_access_token, "refresh_token": request.refresh_token, "token_type": "Bearer"}

# üîπ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã (—É–¥–∞–ª–µ–Ω–∏–µ Refresh-—Ç–æ–∫–µ–Ω–∞)
@router.post("/logout", summary="–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã")
async def logout(request: RefreshRequest, db: AsyncSession = Depends(get_db_session)):
    await db.execute(delete(RefreshToken).where(RefreshToken.token == request.refresh_token))
    #await db.execute(select(RefreshToken).where(RefreshToken.token == request.refresh_token).delete())
    await db.commit()
    return {"message": "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"}

# ‚úÖ 4. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞

# üîπ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞
async def get_current_user(token: str = Depends(oauth2_scheme), db: AsyncSession = Depends(get_db_session)) -> CurrentUser:
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        user_id = payload.get("sub")

        result = await db.execute(select(User).where(User.id == user_id))
        user = result.scalars().first()

        if not user:
            raise HTTPException(status_code=401, detail="User not found")
        return CurrentUser(user_id=user.id, role=user.role)
    except jwt.ExpiredSignatureError:
        raise HTTPException(status_code=401, detail="Token has expired")
    except jwt.InvalidTokenError:
        raise HTTPException(status_code=401, detail="Invalid token")

"""
async def get_current_user(token: str = Depends(oauth2_scheme), db: AsyncSession = Depends(get_db_session)):
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        user_id = payload.get("sub")

        result = await db.execute(select(User).where(User.id == user_id))
        user = result.scalars().first()

        if not user:
            raise HTTPException(status_code=401, detail="User not found")
        return user
    except jwt.ExpiredSignatureError:
        raise HTTPException(status_code=401, detail="Token has expired")
    except jwt.InvalidTokenError:
        raise HTTPException(status_code=401, detail="Invalid token")
"""
# ‚úÖ 5. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
@router.get("/me", summary="–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
async def get_user_profile(current_user: CurrentUser  = Depends(get_current_user)):
    return current_user.model_dump()
    """
    return {
        "id": str(current_user.id),
        "email": current_user.email,
        "full_name": current_user.full_name,
        "company_name": current_user.company_name,
        "contacts": current_user.contacts,
        "role": current_user.role,
        "created_at": current_user.created_at,
        "updated_at": current_user.updated_at,
    }"""

# üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UpdateProfileRequest(BaseModel):
    full_name: str

@router.put("/update-profile", summary="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def update_profile(request: UpdateProfileRequest, current_user: User = Depends(get_current_user), db: AsyncSession = Depends(get_db_session)):
    current_user.full_name = request.full_name
    await db.commit()
    await db.refresh(current_user)
    return {"message": "–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω"}

# üîπ –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class ChangePasswordRequest(BaseModel):
    old_password: str
    new_password: str

@router.post("/change-password", summary="–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def change_password(request: ChangePasswordRequest, current_user: User = Depends(get_current_user), db: AsyncSession = Depends(get_db_session)):
    if not pwd_context.verify(request.old_password, current_user.password_hash):
        raise HTTPException(status_code=400, detail="–°—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–µ–Ω")

    current_user.password_hash = pwd_context.hash(request.new_password)
    await db.commit()
    return {"message": "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω"}

class TokenRequest(BaseModel):
    token: str

@router.post("/verify-token", summary="–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞")
async def verify_token(request: TokenRequest):  #(token: str):
    try:
        payload = jwt.decode(request.token, SECRET_KEY, algorithms=[ALGORITHM])
        user_id = payload.get("sub")
        role = payload.get("role")

        if not user_id:
            raise HTTPException(status_code=401, detail="Invalid token")

        return {"user_id": user_id, "role": role}
    except jwt.ExpiredSignatureError:
        raise HTTPException(status_code=401, detail="Token has expired")
    except jwt.InvalidTokenError:
        raise HTTPException(status_code=401, detail="Invalid token")
