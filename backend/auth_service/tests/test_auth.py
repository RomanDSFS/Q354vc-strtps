
import sys
import os

# ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º `backend` –∏ `auth_service` –≤ PYTHONPATH, —á—Ç–æ–±—ã pytest –Ω–∞—Ö–æ–¥–∏–ª –º–æ–¥—É–ª–∏
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "../../")))
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "../../auth_service")))


import asyncio
import pytest
import uuid
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from sqlalchemy.future import select
from passlib.context import CryptContext
from fastapi.security import OAuth2PasswordRequestForm

# ‚úÖ –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
from database import Base
from database import get_db  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç
from models import User, RefreshToken
from routes.auth import register, login, create_refresh_token, logout, refresh_token as refresh_token_endpoint
from routes.auth import RefreshRequest  # –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏ –∑–∞–ø—Ä–æ—Å–∞

# ‚úÖ –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ë–î
TEST_DATABASE_URL = "postgresql+asyncpg://postgres:cdcefdsqweS2Q@localhost:5432/venture_app_test"
engine = create_async_engine(TEST_DATABASE_URL, future=True, echo=True)
async_session_maker = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)

# ‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

@pytest.fixture(scope="function")
async def db():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)  # ‚úÖ –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏

    async with async_session_maker() as session:
        yield session  # ‚úÖ –ü–µ—Ä–µ–¥–∞—ë–º —Å–µ—Å—Å–∏—é –≤ —Ç–µ—Å—Ç

    async with engine.begin() as conn:
        for table in reversed(Base.metadata.sorted_tables):  # ‚úÖ –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –Ω–æ –Ω–µ —É–¥–∞–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
            await conn.execute(table.delete())  
        await conn.commit()
 # ‚úÖ –Ø–í–ù–û–ï –ó–ê–ö–†–´–¢–ò–ï –°–û–ï–î–ò–ù–ï–ù–ò–Ø
    await engine.dispose()
@pytest.fixture(scope="session", autouse=True)
def reset_event_loop():
    asyncio.set_event_loop(asyncio.new_event_loop())

# ‚úÖ –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@pytest.mark.asyncio
async def test_register_user(db: AsyncSession):
    request_data = {
        "email": "newuser@example.com",
        "password": "NewPassword123",
        "full_name": "New User",
        "role": "investor"
    }
    
    # ‚úÖ –í–ê–ñ–ù–û: register –æ–∂–∏–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç `RegisterRequest`, –∞ –Ω–µ `dict`
    from routes.auth import RegisterRequest  # –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏ –∑–∞–ø—Ä–æ—Å–∞
    request_obj = RegisterRequest(**request_data)  # –°–æ–∑–¥–∞—ë–º Pydantic-–æ–±—ä–µ–∫—Ç
    
    response = await register(request=request_obj, db=db)  # ‚úÖ –ü–µ—Ä–µ–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –≤ `register`
    assert response["message"] == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"
    
    result = await db.execute(select(User).where(User.email == request_data["email"]))
    user = result.scalars().first()
    
    assert user is not None
    assert user.full_name == "New User"
    assert user.role == "investor"
    assert pwd_context.verify("NewPassword123", user.password_hash)  # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–æ–ª—å –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω

# ‚úÖ –¢–µ—Å—Ç –ª–æ–≥–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@pytest.mark.asyncio
async def test_login_user(db: AsyncSession):
    user = User(
        id=str(uuid.uuid4()),
        email="loginuser@example.com",
        password_hash=pwd_context.hash("TestPassword"),  # ‚úÖ –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        full_name="Login User",
        role="investor"
    )
    db.add(user)
    await db.commit()
    await db.refresh(user)

    # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º `OAuth2PasswordRequestForm`, –Ω–æ –≤ —Ç–µ—Å—Ç–∞—Ö –æ–Ω –ø—Ä–∏–Ω–∏–º–∞–µ—Ç `dict`
    form_data = OAuth2PasswordRequestForm(
        username="loginuser@example.com",
        password="TestPassword"
    )

    response = await login(form_data, db)

    assert "access_token" in response
    assert "refresh_token" in response
    assert response["token_type"] == "Bearer"
    assert response["access_token"] is not None
    assert response["refresh_token"] is not None


# ‚úÖ –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è access-—Ç–æ–∫–µ–Ω–∞
@pytest.mark.asyncio
async def test_refresh_token(db: AsyncSession):
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ access-—Ç–æ–∫–µ–Ω–∞ –ø–æ refresh-—Ç–æ–∫–µ–Ω—É"""

    # üîπ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = User(
        id=str(uuid.uuid4()),
        email="refreshuser@example.com",
        password_hash=pwd_context.hash("SecurePassword123"),
        full_name="Refresh User",
        role="investor"
    )
    db.add(user)
    await db.commit()
    await db.refresh(user)

    # üîπ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º refresh-—Ç–æ–∫–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –ë–î
    from routes.auth import create_refresh_token
    refresh_token = create_refresh_token({"sub": str(user.id)})

    new_refresh_token = RefreshToken(id=uuid.uuid4(), user_id=user.id, token=refresh_token)
    db.add(new_refresh_token)
    await db.commit()

    # ‚úÖ –°–æ–∑–¥–∞–µ–º Pydantic-–æ–±—ä–µ–∫—Ç –≤–º–µ—Å—Ç–æ dict
    request_obj = RefreshRequest(refresh_token=refresh_token)

    # üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ access-—Ç–æ–∫–µ–Ω–∞
    from routes.auth import refresh_token as refresh_token_endpoint
    response = await refresh_token_endpoint(request_obj, db)

    # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω
    assert "access_token" in response
    assert response["access_token"] is not None
    assert response["token_type"] == "Bearer"
    assert response["refresh_token"] == refresh_token  # refresh-—Ç–æ–∫–µ–Ω –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–µ–º –∂–µ

# ‚úÖ –¢–µ—Å—Ç –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
@pytest.mark.asyncio
async def test_logout(db: AsyncSession):
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã (—É–¥–∞–ª–µ–Ω–∏–µ refresh-—Ç–æ–∫–µ–Ω–∞)"""

    # üîπ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = User(
        id=str(uuid.uuid4()),
        email="logoutuser@example.com",
        password_hash=pwd_context.hash("LogoutTestPassword"),
        full_name="Logout User",
        role="investor"
    )
    db.add(user)
    await db.commit()
    await db.refresh(user)

    # üîπ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º refresh-—Ç–æ–∫–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –ë–î
    from routes.auth import create_refresh_token
    refresh_token = create_refresh_token({"sub": str(user.id)})

    logout_refresh = RefreshToken(id=uuid.uuid4(), user_id=user.id, token=refresh_token)
    db.add(logout_refresh)
    await db.commit()

    # ‚úÖ –°–æ–∑–¥–∞–µ–º Pydantic-–æ–±—ä–µ–∫—Ç –≤–º–µ—Å—Ç–æ dict
    request_obj = RefreshRequest(refresh_token=refresh_token)

    # üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ `/logout`
    from routes.auth import logout
    response = await logout(request_obj, db)

    # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥
    assert response["message"] == "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"

    # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ refresh-—Ç–æ–∫–µ–Ω —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î
    result = await db.execute(select(RefreshToken).where(RefreshToken.token == refresh_token))
    assert result.scalars().first() is None  # –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–¥–∞–ª–µ–Ω

# ‚úÖ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
@pytest.mark.asyncio
async def test_get_user_profile(db: AsyncSession):
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    # üîπ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = User(
        id=str(uuid.uuid4()),
        email="profileuser@example.com",
        password_hash=pwd_context.hash("ProfilePassword"),
        full_name="Profile User",
        role="investor"
    )
    db.add(user)
    await db.commit()
    await db.refresh(user)

    # üîπ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º access-—Ç–æ–∫–µ–Ω
    from routes.auth import create_access_token
    access_token = create_access_token({"sub": str(user.id), "role": user.role})

    # üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ `/me`
    from routes.auth import get_user_profile
    response = await get_user_profile(current_user=user)

    # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    assert response["id"] == str(user.id)
    assert response["email"] == user.email
    assert response["full_name"] == user.full_name
    assert response["role"] == user.role

# ‚úÖ –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@pytest.mark.asyncio
async def test_update_profile(db: AsyncSession):
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    # üîπ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = User(
        id=str(uuid.uuid4()),
        email="updateprofile@example.com",
        password_hash=pwd_context.hash("UpdateProfilePassword"),
        full_name="Old Name",
        role="investor"
    )
    db.add(user)
    await db.commit()
    await db.refresh(user)

    # üîπ –°–æ–∑–¥–∞–µ–º Pydantic-–æ–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞
    from routes.auth import UpdateProfileRequest, update_profile
    request_obj = UpdateProfileRequest(full_name="New Name")

    # üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    response = await update_profile(request_obj, current_user=user, db=db)

    # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    assert response["message"] == "–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω"

    # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è –æ–±–Ω–æ–≤–∏–ª–æ—Å—å –≤ –ë–î
    await db.refresh(user)
    assert user.full_name == "New Name"

# ‚úÖ –¢–µ—Å—Ç —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@pytest.mark.asyncio
async def test_change_password(db: AsyncSession):
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    # üîπ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = User(
        id=str(uuid.uuid4()),
        email="changepass@example.com",
        password_hash=pwd_context.hash("OldPassword123"),
        full_name="Password User",
        role="investor"
    )
    db.add(user)
    await db.commit()
    await db.refresh(user)

    # üîπ –°–æ–∑–¥–∞–µ–º Pydantic-–æ–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞
    from routes.auth import ChangePasswordRequest, change_password
    request_obj = ChangePasswordRequest(old_password="OldPassword123", new_password="NewSecurePassword456")

    # üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è
    response = await change_password(request_obj, current_user=user, db=db)

    # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    assert response["message"] == "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω"

    # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω–∏–ª—Å—è –≤ –ë–î
    await db.refresh(user)
    assert pwd_context.verify("NewSecurePassword456", user.password_hash)  # –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Ö–µ—à–∏—Ä–æ–≤–∞—Ç—å—Å—è

"""
# ‚úÖ –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è access-—Ç–æ–∫–µ–Ω–∞
@pytest.mark.asyncio
async def test_refresh_token(db: AsyncSession):
    #–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ access-—Ç–æ–∫–µ–Ω–∞ –ø–æ refresh-—Ç–æ–∫–µ–Ω—É
    
    # üîπ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = User(
        id=str(uuid.uuid4()),
        email="refreshuser@example.com",
        password_hash=pwd_context.hash("SecurePassword123"),
        full_name="Refresh User",
        role="investor"
    )
    db.add(user)
    await db.commit()
    await db.refresh(user)

    # üîπ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º refresh-—Ç–æ–∫–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –ë–î
    #from routes.auth import create_refresh_token
    refresh_token = create_refresh_token({"sub": str(user.id)})
    
    new_refresh_token = RefreshToken(id=uuid.uuid4(), user_id=user.id, token=refresh_token)
    db.add(new_refresh_token)
    await db.commit()

    # üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ access-—Ç–æ–∫–µ–Ω–∞
    #from routes.auth import refresh_token as refresh_token_endpoint
    request_data = {"refresh_token": refresh_token}
    
    response = await refresh_token_endpoint(request_data, db)
    
    # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω
    assert "access_token" in response
    assert response["access_token"] is not None
    assert response["token_type"] == "Bearer"
    assert response["refresh_token"] == refresh_token  # refresh-—Ç–æ–∫–µ–Ω –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–µ–º –∂–µ

# ‚úÖ –¢–µ—Å—Ç –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
@pytest.mark.asyncio
async def test_logout(db: AsyncSession):
    #–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã (—É–¥–∞–ª–µ–Ω–∏–µ refresh-—Ç–æ–∫–µ–Ω–∞)
    
    # üîπ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = User(
        id=str(uuid.uuid4()),
        email="logoutuser@example.com",
        password_hash=pwd_context.hash("LogoutTestPassword"),
        full_name="Logout User",
        role="investor"
    )
    db.add(user)
    await db.commit()
    await db.refresh(user)

    # üîπ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º refresh-—Ç–æ–∫–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –ë–î
    #from routes.auth import create_refresh_token
    refresh_token = create_refresh_token({"sub": str(user.id)})
    
    logout_refresh = RefreshToken(id=uuid.uuid4(), user_id=user.id, token=refresh_token)
    db.add(logout_refresh)
    await db.commit()

    # üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ `/logout`
    #from routes.auth import logout
    request_data = {"refresh_token": refresh_token}
    
    response = await logout(request_data, db)
    
    # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥
    assert response["message"] == "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"

    # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ refresh-—Ç–æ–∫–µ–Ω —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î
    result = await db.execute(select(RefreshToken).where(RefreshToken.token == refresh_token))
    assert result.scalars().first() is None  # –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–¥–∞–ª–µ–Ω"""
