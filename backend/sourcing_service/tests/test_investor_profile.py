import sys
import os

# ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º `backend` –∏ `sourcing_service` –≤ PYTHONPATH
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "../../")))
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "../../sourcing_service")))

import asyncio
import pytest
import uuid
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from sqlalchemy.future import select
from fastapi import HTTPException
from database import Base
from database import get_db
from models import User, Startup
from routes.startups import save_investor_profile, save_founder_profile

# ‚úÖ –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ë–î
TEST_DATABASE_URL = "postgresql+asyncpg://postgres:cdcefdsqweS2Q@localhost:5432/venture_app_test"
engine = create_async_engine(TEST_DATABASE_URL, future=True, echo=True)
async_session_maker = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)

@pytest.fixture(scope="function")
async def db():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)  # ‚úÖ –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏

    async with async_session_maker() as session:
        yield session  # ‚úÖ –ü–µ—Ä–µ–¥–∞—ë–º —Å–µ—Å—Å–∏—é –≤ —Ç–µ—Å—Ç

    async with engine.begin() as conn:
        for table in reversed(Base.metadata.sorted_tables):  # ‚úÖ –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –Ω–æ –Ω–µ —É–¥–∞–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
            await conn.execute(table.delete())  
        await conn.commit()

    # ‚úÖ –Ø–í–ù–û–ï –ó–ê–ö–†–´–¢–ò–ï –°–û–ï–î–ò–ù–ï–ù–ò–Ø
    await engine.dispose()

@pytest.fixture(scope="session", autouse=True)
def reset_event_loop():
    asyncio.set_event_loop(asyncio.new_event_loop())

# ‚úÖ –¢–µ—Å—Ç—ã –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞
@pytest.mark.asyncio
async def test_update_investor_profile_success(db: AsyncSession):
    """‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞"""
    
    investor = User(
        id=str(uuid.uuid4()),
        email="investor@example.com",
        password_hash="hashedpassword",
        company_name = "Columnus", # - –ò –£–ë–†–ê–¢–¨ –ò–ó –ú–û–î–ï–õ–° –°–û–£–†–°_–°–ï–ö–í–ò–°
        contacts = "CString",#- –ò –£–ë–†–ê–¢–¨ –ò–ó –ú–û–î–ï–õ–° –°–û–£–†–°_–°–ï–†–í–ò–°
        full_name="Investor Name",
        role="investor"
    )
    db.add(investor)
    await db.commit()
    await db.refresh(investor)

    investor_data = {
        "investor_type": ["VC", "Angel"],
        "investment_stage": ["Seed", "Series A"],
        "industry": ["Tech", "AI"],
        "region": ["USA", "Europe"],
        "min_check": 50000
    }

    response = await save_investor_profile(investor_data, db, {"id": investor.id, "role": "investor"})

    assert response["message"] == "Investor profile updated successfully"

    result = await db.execute(select(User).where(User.id == investor.id))
    updated_investor = result.scalars().first()

    assert updated_investor is not None
    assert updated_investor.investor_type == investor_data["investor_type"]
    assert updated_investor.investment_stage == investor_data["investment_stage"]
    assert updated_investor.industry == investor_data["industry"]
    assert updated_investor.region == investor_data["region"]
    assert updated_investor.min_check == investor_data["min_check"]

@pytest.mark.asyncio
async def test_update_investor_profile_wrong_role(db: AsyncSession):
    """‚ùå –¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ-–∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–º"""
    
    founder = User(
        id=str(uuid.uuid4()),
        email="founder@example.com",
        password_hash="hashedpassword",
        company_name = "Columnus", # - –ò –£–ë–†–ê–¢–¨ –ò–ó –ú–û–î–ï–õ–° –°–û–£–†–°_–°–ï–ö–í–ò–°
        contacts = "CString",#- –ò –£–ë–†–ê–¢–¨ –ò–ó –ú–û–î–ï–õ–° –°–û–£–†–°_–°–ï–†–í–ò–°
        full_name="Founder Name",
        role="founder"
    )
    db.add(founder)
    await db.commit()
    await db.refresh(founder)

    investor_data = {
        "investor_type": ["VC"],
        "investment_stage": ["Seed"],
        "industry": ["Tech"],
        "region": ["USA"],
        "min_check": 100000
    }

    with pytest.raises(HTTPException) as exc_info:
        await save_investor_profile(investor_data, db, {"id": founder.id, "role": "founder"})

    assert exc_info.value.status_code == 403
    assert exc_info.value.detail == "Access denied"

@pytest.mark.asyncio
async def test_update_founder_profile_success(db: AsyncSession):
    """‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è"""

    # üîπ –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ñ–∞—É–Ω–¥–µ—Ä–∞)
    founder = User(
        id=str(uuid.uuid4()),
        email="founder@example.com",
        password_hash="hashed_password",
        company_name = "Mozsau", # - –ò –£–ë–†–ê–¢–¨ –ò–ó –ú–û–î–ï–õ–° –°–û–£–†–°_–°–ï–ö–í–ò–°
        contacts = "Ddsrfffffff",
        full_name="Founder User",
        role="founder"
    )
    db.add(founder)
    await db.commit()
    await db.refresh(founder)

    # üîπ –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ä—Ç–∞–ø –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ—Ñ–∏–ª—è
    startup = Startup(
        id=str(uuid.uuid4()),
        founder_id=founder.id,
        #company_name="Tech Startup",
        industry=["AI"],
        stage=["Pre-Seed"],
        region=["USA"],
        min_check=20000,
        #contacts="contact@startup.com"
    )
    db.add(startup)
    await db.commit()
    await db.refresh(startup)

    # üîπ –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    request_data = {
        "stage": ["Series A"],
        "industry": ["AI", "FinTech"],
        "region": ["USA", "Europe"],
        "min_check": 50000
    }

    # üîπ –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    response = await save_founder_profile(request_data, db, current_user={"id": founder.id, "role": "founder"})

    # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    assert response["message"] == "Founder profile updated successfully"

    # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
    result = await db.execute(select(Startup).where(Startup.founder_id == founder.id))
    updated_startup = result.scalars().first()

    assert updated_startup is not None
    assert updated_startup.stage == ["Series A"]
    assert updated_startup.industry == ["AI", "FinTech"]
    assert updated_startup.region == ["USA", "Europe"]
    assert updated_startup.min_check == 50000

"""
# ‚úÖ –¢–µ—Å—Ç—ã –¥–ª—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è (—Ñ–∞—É–Ω–¥–µ—Ä–∞)
@pytest.mark.asyncio
async def test_update_founder_profile_success(db: AsyncSession):
    #‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è

    founder = User(
        id=str(uuid.uuid4()),
        email="founder@example.com",
        password_hash="hashed_password",
        company_name = "Mozsau", # - –ò –£–ë–†–ê–¢–¨ –ò–ó –ú–û–î–ï–õ–° –°–û–£–†–°_–°–ï–ö–í–ò–°
        contacts = "Ddsrfffffff",
        full_name="Founder User",
        role="founder"
    )
    db.add(founder)
    await db.commit()
    await db.refresh(founder)

    request_data = {
        "stage": ["Seed"],
        "industry": ["AI", "FinTech"],
        "region": ["USA", "Europe"],
        "min_check": 50000
    }

    response = await save_founder_profile(request_data, db, current_user={"id": founder.id, "role": "founder"})

    assert response["message"] == "Founder profile updated successfully"

    result = await db.execute(select(Startup).where(Startup.founder_id == founder.id))
    updated_startup = result.scalars().first()

    assert updated_startup is not None
    assert updated_startup.stage == ["Seed"]
    assert updated_startup.industry == ["AI", "FinTech"]
    assert updated_startup.region == ["USA", "Europe"]
    assert updated_startup.min_check == 50000
"""
@pytest.mark.asyncio
async def test_update_founder_profile_wrong_role(db: AsyncSession):
    #‚ùå –û—à–∏–±–∫–∞: –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ-—Ñ–∞—É–Ω–¥–µ—Ä–æ–º

    investor = User(
        id=str(uuid.uuid4()),
        email="investor@example.com",
        password_hash="hashed_password",
        company_name = "Columnus", # - –ò –£–ë–†–ê–¢–¨ –ò–ó –ú–û–î–ï–õ–° –°–û–£–†–°_–°–ï–ö–í–ò–°
        contacts = "CString",
        full_name="Investor User",
        role="investor"
    )
    db.add(investor)
    await db.commit()
    await db.refresh(investor)

    request_data = {
        "stage": ["Series A"],
        "industry": ["HealthTech"],
        "region": ["Asia"],
        "min_check": 100000
    }

    with pytest.raises(HTTPException) as exc_info:
        await save_founder_profile(request_data, db, current_user={"id": investor.id, "role": "investor"})

    assert exc_info.value.status_code == 403
    assert exc_info.value.detail == "Access denied"
