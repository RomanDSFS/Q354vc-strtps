from sqlalchemy import Column, String, TIMESTAMP, ForeignKey, text, Float, ARRAY, DateTime, func, Integer
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.orm import relationship
import uuid
#from database import Base
from sourcing_service.database import Base
from auth_service.models import RefreshToken


# ‚úÖ –ú–æ–¥–µ–ª—å —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤
class Startup(Base):
    __tablename__ = "startups"
    __table_args__ = {"extend_existing": True}  

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    founder_id = Column(UUID(as_uuid=True), ForeignKey("users.id", ondelete="CASCADE"), nullable=False)
    industry = Column(ARRAY(String), nullable=False)
    stage = Column(ARRAY(String), nullable=False)
    region = Column(ARRAY(String), nullable=False)
    min_check = Column(Float, nullable=False)
    pitch_deck = Column(String, nullable=True)  
    created_at = Column(TIMESTAMP, server_default=text("now()"))
    updated_at = Column(TIMESTAMP, server_default=text("now()"), onupdate=text("now()"))
    name = Column(String, nullable=False)
    description = Column(String, nullable=False)
# üîπ –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å —Å –æ—Ü–µ–Ω–∫–∞–º–∏ (–Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –Ω–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏ `joinedload`)
    scores = relationship("StartupScore", back_populates="startup", cascade="all, delete-orphan")
    
# ‚úÖ –ú–æ–¥–µ–ª—å `User`
class User(Base):
    __tablename__ = "users"
    __table_args__ = {"extend_existing": True}

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)  # üîπ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Ç–µ–ø–µ—Ä—å UUID
    email = Column(String, unique=True, nullable=False)
    company_name = Column(String, nullable=False)  #- –ò –£–ë–†–ê–¢–¨ –ò–ó tablename__ = "startups"–ú–û–î–ï–õ–° –°–û–£–†–°_–°–ï–ö–í–ò–°
    contacts = Column(String, nullable=False) #- –ò –£–ë–†–ê–¢–¨ –ò–ó –ú–û–î–ï–õ–° –°–û–£–†–°_–°–ï–†–í–ò–°
    password_hash = Column(String, nullable=False)
    full_name = Column(String, nullable=False)
    role = Column(String, nullable=False)  # 'investor' or 'founder'
    created_at = Column(DateTime, default=func.now())
    updated_at = Column(DateTime, default=func.now(), onupdate=func.now())

    # üîπ –ü–æ–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞
    investor_type = Column(ARRAY(String), nullable=True)
    investment_stage = Column(ARRAY(String), nullable=True)
    industry = Column(ARRAY(String), nullable=True)  # ‚úÖ –í–µ—Ä–Ω—É–ª–∏ industry
    region = Column(ARRAY(String), nullable=True)  # ‚úÖ –í–µ—Ä–Ω—É–ª–∏ region
    min_check = Column(Float, nullable=True)

class AnalysisResult(Base):
    __tablename__ = "analysis_results"
    __table_args__ = {"extend_existing": True}
    
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    startup_id = Column(UUID(as_uuid=True), ForeignKey("startups.id", ondelete="CASCADE"), nullable=False)  # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å–≤—è–∑—å
    founder_id = Column(UUID(as_uuid=True), ForeignKey("users.id", ondelete="CASCADE"), nullable=False)
    file_path = Column(String, nullable=False)
    
    # ‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π —Å–∫–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ä—Ç–∞–ø–∞
    startup_score = Column(Float, nullable=False)

    # ‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
    usp_score = Column(Float, nullable=True)        # –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Ç–æ—Ä–≥–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (USP)
    market_score = Column(Float, nullable=True)     # –†—ã–Ω–æ–∫
    business_model_score = Column(Float, nullable=True)  # –ë–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª—å
    team_score = Column(Float, nullable=True)       # –ö–æ–º–∞–Ω–¥–∞
    finance_score = Column(Float, nullable=True)    # –§–∏–Ω–∞–Ω—Å—ã

    created_at = Column(DateTime, server_default=func.now())

class StartupScore(Base):
    __tablename__ = "startup_scores"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    startup_id = Column(UUID(as_uuid=True), ForeignKey("startups.id", ondelete="CASCADE"), nullable=False)  
    category_id = Column(Integer, nullable=False)  # üîπ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ö—Ä–∞–Ω–µ–Ω–∏–µ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    question_id = Column(Integer, nullable=False)
    score = Column(Integer, nullable=False)

    # üîπ –°–≤—è–∑—å —Å –º–æ–¥–µ–ª—å—é —Å—Ç–∞—Ä—Ç–∞–ø–∞ (—É–¥–æ–±–Ω–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
    startup = relationship("Startup", back_populates="scores")

    # ‚úÖ –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è UUID –≤ —Å—Ç—Ä–æ–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ JSON
    def to_dict(self):
        return {
            "id": str(self.id),  # ‚úÖ UUID ‚Üí str
            "startup_id": str(self.startup_id),  # ‚úÖ UUID ‚Üí str
            "category_id": self.category_id,
            "question_id": self.question_id,
            "score": self.score
        }
"""
class StartupScore(Base):
    __tablename__ = "startup_scores"

    id = Column(Integer, primary_key=True, index=True, autoincrement=True)
    startup_id = Column(ForeignKey("startups.id", ondelete="CASCADE"), nullable=False)
    question_id = Column(Integer, nullable=False)
    score = Column(Integer, nullable=False)"""
  
