"use client";
import { createContext, useContext, useEffect, useState } from "react";
import { fetchUserProfile } from "@/utils/auth";

// –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
interface User {
  id: string;
  email: string;
  role: string;
  [key: string]: any; // –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å –ø–æ–¥ –Ω—É–∂–¥—ã
}

// –¢–∏–ø –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
interface AuthContextType {
  user: User | null;
  isLoading: boolean;
  setUser: (user: User | null) => void; // ‚úÖ –¥–æ–±–∞–≤–∏–ª–∏
}

// üëâ –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
const AuthContext = createContext<AuthContextType>({
  user: null,
  isLoading: true,
  setUser: () => {},
});

// ‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç –≤—Å—ë –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
export const AuthProvider = ({ children }: { children: React.ReactNode }) => {
  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  // ‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  useEffect(() => {
    const initUser = async () => {
      const profile = await fetchUserProfile();
      setUser(profile);
      setIsLoading(false);
    };
    initUser();
  }, []);

  return (
    <AuthContext.Provider value={{ user, isLoading,setUser  }}>
      {children}
    </AuthContext.Provider>
  );
};

// ‚úÖ –•—É–∫ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∏–∑ –ª—é–±–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
export const useAuth = () => useContext(AuthContext);
